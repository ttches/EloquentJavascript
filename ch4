//create a reversed array by building a new array.
function reverseArray(data) {
  newArray=[]
  while (data.length !== 0) {
    newArray.push(data.pop());
  }
  return newArray;
};
//create reversed array within the same array. I actually like my answer better than the book's here.
function reverseArrayInPlace(data) {
  for (var i = 0; i < data.length; i++) {
    data.splice(i, 0, data[data.length - 1]);
    data.splice(data.length - 1, 1);
  }
  return data;
};
function arrayToList(data){
  var list = null
  for (var i = data.length - 1; i >= 0; i--) {
    list = {value: array[i], rest: list};
  }
  return list;
};

function listToArray(list) {
  newArray = []
  while (true) {
    newArray.push(list.value);
    if (list.rest === null) {
      return newArray;
    }
    list = list.rest;
  }
};
// her solution looks better. I didn't know you could construct a for loop like this:
function listToArray(list) {
  var array = [];
  for (var node = list; node; node = node.rest)
    array.push(node.value);
  return array;
}

function prepend(value, rest) {
  list = {}
  list.value = value;
  list.rest = rest;
  return list;
};

function nth(list, n) {
  if (n === 0) {
    return list.value;
  }else{
    return nth(list.rest, n-1);
  }
};
